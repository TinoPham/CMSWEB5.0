using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using System.Globalization;

using CMSWebApi.ServiceInterfaces;
using CMSWebApi.DataModels;
using PACDMModel.Model;
using CMSWebApi.APIFilters;

namespace CMSWebApi.BusinessServices.Configuration
{
	public partial class CalendarBusinessService : BusinessBase<ICalendarService>
	{
		//public ConfigurationBusinessService(CultureInfo culture, IConfigurationService dbservice) : base(dbservice, culture) { }

		public IQueryable<CalendarEvent> GetCalendarEvent()
		{
			IQueryable<tCMSWeb_CalendarEvents> evts = DataService.GetCalendarEvents();
			List<CalendarEvent> modelEvts = new List<CalendarEvent>();//Enumerable.Empty<CalendarEvent>().AsQueryable();//
			foreach (tCMSWeb_CalendarEvents evt in evts)
			{
				CalendarEvent cal = new CalendarEvent();
				ImportCalendar(ref cal, evt);
				modelEvts.Add(cal);
			}
			/*
			List<CalendarEvent> modelEvts = (from item in evts select new CalendarEvent()
			{
				ID = item.ECalID,
				Name = item.ECalName,
				Color = (item.ECColor == null) ? 0 : (int)item.ECColor,
				CreatedBy = item.ECCreatedBy,
				CreatedDate = (item.ECCreatedDate == null) ? DateTime.MinValue : (DateTime)item.ECCreatedDate,
				Description = item.ECDescription,
				StartDate = (item.ECStartDate == null) ? DateTime.MinValue : (DateTime)item.ECStartDate,
				EndDate = (item.ECEndDate == null) ? DateTime.MinValue : (DateTime)item.ECEndDate,
				EventTrigger = (item.EventTrigger == null) ? false : (bool)item.EventTrigger,
				RemindBefore = (item.RemindBefore == null) ? (byte)0 : (byte)item.RemindBefore,
				ScheduleType = (item.ScheduleType == null) ? (short)0 : (short)item.ScheduleType,
				RemindID = (item.RemindID == null) ? 0 : (int)item.RemindID,
				RelatedFunction = (item.RelatedFunction == null) ? (short)0 : (short)item.RelatedFunction,
				NormalizeAllSite = (item.NormalizeAllSite == null) ? false : (bool)item.NormalizeAllSite,
				NormalizeTrigger = (item.NormalizeTrigger == null) ? DateTime.MinValue : (DateTime)item.NormalizeTrigger,
				RecipientIDs = DataService.GetCalendarRecipients(item.ECalID),
				SiteIDs = DataService.GetCalendarSites(item.ECalID)
			}).ToList();
			*/
			return modelEvts.AsQueryable();
		}

		public List<CalendarEventModel> GetCalendarList()
		{
			return DataService.CalendarEvents().Where(t=> DateTime.Compare((DateTime)t.ECEndDate, DateTime.Now) > 0).Select(t => new CalendarEventModel()
			{
				Id = t.ECalID,
				Name = t.ECalName,
				EndDate = t.ECEndDate,
				StartDate = t.ECStartDate
			}).ToList();
		}

		public CalendarEvent GetCalendarEvent(int id)
		{
			tCMSWeb_CalendarEvents calEvent = DataService.GetCalendarEvent(id);
			if (calEvent != null)
			{
				CalendarEvent evt = new CalendarEvent();
				ImportCalendar(ref evt, calEvent);
				return evt;
			}
			return null;
		}
		public CalendarEventData UpdateCalendar(CalendarEvent calModel)
		{
			tCMSWeb_CalendarEvents calEvent = null;
			if (calModel.ID > 0)
			{
				calEvent = DataService.GetCalendarEvent(calModel.ID);
				UpdateCalendar(calModel, ref calEvent);
				DataService.EditCalendarEvent(calEvent);
			}
			else
			{
				calEvent = new tCMSWeb_CalendarEvents();
				UpdateCalendar(calModel, ref calEvent);
				DataService.AddCalendarEvent(calEvent);
			}

			CalendarEventData calData = new CalendarEventData();
			calData.CalEvent = calModel;
			return calData;
		}
		private void UpdateCalendar(CalendarEvent calModel, ref tCMSWeb_CalendarEvents calEvent)
		{
			if (calEvent == null || calModel == null)
				return;
			calEvent.ECalName = calModel.Name;
			calEvent.ECColor = calModel.Color;
			calEvent.ECCreatedBy = calModel.CreatedBy;
			calEvent.ECCreatedDate = calModel.CreatedDate;
			calEvent.ECDescription = calModel.Description;
			calEvent.ECEndDate = calModel.EndDate;
			calEvent.ECStartDate = calModel.StartDate;

			calEvent.RemindBefore = calModel.RemindBefore;
			calEvent.ScheduleType = calModel.ScheduleType;
			calEvent.RemindID = 0;
			calEvent.EventTrigger = calModel.EventTrigger;
			calEvent.RelatedFunction = calModel.RelatedFunction;
			calEvent.NormalizeAllSite = calModel.NormalizeAllSite;
			calEvent.NormalizeTrigger = calModel.NormalizeTrigger;

			DataService.UpdateCalendarRecipients(calEvent, calModel.RecipientIDs);
			DataService.UpdateCalendarSites(calEvent, calModel.SiteIDs);
		}
		private void ImportCalendar(ref CalendarEvent calModel, tCMSWeb_CalendarEvents calEvent)
		{
			if (calEvent == null || calModel == null)
				return;
			calModel.ID = calEvent.ECalID;
			calModel.Name = calEvent.ECalName;
			calModel.Color = (calEvent.ECColor == null) ? 0 : (int)calEvent.ECColor;
			calModel.CreatedBy = calEvent.ECCreatedBy;
			calModel.CreatedDate = (calEvent.ECCreatedDate == null) ? DateTime.MinValue : (DateTime)calEvent.ECCreatedDate;
			calModel.Description = calEvent.ECDescription;
			calModel.StartDate = (calEvent.ECStartDate == null) ? DateTime.MinValue : (DateTime)calEvent.ECStartDate;
			calModel.EndDate = (calEvent.ECEndDate == null) ? DateTime.MinValue : (DateTime)calEvent.ECEndDate;
			calModel.EventTrigger = (calEvent.EventTrigger == null) ? false : (bool)calEvent.EventTrigger;

			calModel.RemindBefore = (calEvent.RemindBefore == null) ? (byte)0 : (byte)calEvent.RemindBefore;
			calModel.ScheduleType = (calEvent.ScheduleType == null) ? (short)0 : (short)calEvent.ScheduleType;
			calModel.RemindID = (calEvent.RemindID == null) ? 0 : (int)calEvent.RemindID;
			calModel.RelatedFunction = (calEvent.RelatedFunction == null) ? (short)0 : (short)calEvent.RelatedFunction;
			calModel.NormalizeAllSite = (calEvent.NormalizeAllSite == null) ? false : (bool)calEvent.NormalizeAllSite;
			calModel.NormalizeTrigger = (calEvent.NormalizeTrigger == null) ? DateTime.MinValue : (DateTime)calEvent.NormalizeTrigger;

			calModel.RecipientIDs = DataService.GetCalendarRecipients(calEvent.ECalID).ToList();
			calModel.SiteIDs = DataService.GetCalendarSites(calEvent.ECalID).ToList();
		}
		/*
		public RegionSiteModel GetRegionSites()
		{
			List<tCMSWebRegion> regions = DataService.GetRegions();
			List<tCMSWebSites> sites = DataService.GetAllSites();

			RegionSiteModel modelRegionSites = new RegionSiteModel();

			List<tCMSWebRegion> rootRegions = regions.Where(x => x.RegionParentID == null || x.RegionParentID == 0).ToList();
			//List<tCMSWebRegion> subRegions = null;
			//foreach (tCMSWebRegion reg in rootRegions)
			if(rootRegions != null && rootRegions.Count > 0)
			{
				tCMSWebRegion reg = rootRegions[0];
				//subRegions = regions.Where(x => x.RegionParentID == reg.RegionKey).ToList();
				//RegionSiteModel modelRS = new RegionSiteModel();
				RegionSite regSite = new RegionSite(reg);
				//modelRegionSites.Add(modelRS);
				LoadRegionSite(regions, sites, reg, ref regSite);
				modelRegionSites.regionSites = regSite;
			}

			return modelRegionSites;
		}

		private void LoadRegionSite(List<tCMSWebRegion> regions, List<tCMSWebSites> sites, tCMSWebRegion regParent, ref RegionSite regionSite)
		{
			if (regParent == null)
				return;
			if (regionSite.RegionSites == null)
				regionSite.RegionSites = new List<RegionSite>();

			List<tCMSWebRegion> subRegions = regions.Where(x => x.RegionParentID == regParent.RegionKey).ToList();
			if (subRegions != null && subRegions.Count > 0)
			{
				foreach (tCMSWebRegion reg in subRegions)
				{
					RegionSite regSite = new RegionSite(reg);
					regionSite.RegionSites.Add(regSite);
					LoadRegionSite(regions, sites, reg, ref regSite);
				}
			}
			List<tCMSWebSites> subSites = sites.Where(x => x.RegionKey == regParent.RegionKey).ToList();
			if (subSites != null && subSites.Count > 0)
			{
				foreach (tCMSWebSites site in subSites)
				{
					regionSite.RegionSites.Add(new RegionSite(site));
				}
			}

		}

		public List<CMSWebRecipient> GetRecipients()
		{
			List<tCMSWebRecipients> recipients = DataService.GetRecipients();
			List<CMSWebRecipient> models = new List<CMSWebRecipient>();
			if (recipients != null && recipients.Count > 0)
			{
				foreach (tCMSWebRecipients recip in recipients)
				{
					CMSWebRecipient data = new CMSWebRecipient();
					data.Import(recip);
					models.Add(data);
				}
			}			
			return models;
		}
		*/
	}
}
